using LinearAlgebraicRepresentation
using ViewerGL, LinearAlgebra, SparseArrays, DataStructures, NearestNeighbors
Lar = LinearAlgebraicRepresentation
GL = ViewerGL



function vcongruence(V::Matrix; epsilon=1e-6)
	vclasses, visited = [], []
	kdtree = NearestNeighbors.KDTree(V);
	for vidx = 1 : size(V, 2) if !(vidx in visited)
		 nearvs = NearestNeighbors.inrange(kdtree, V[:,vidx], epsilon)
		 push!(vclasses, nearvs)
		 append!(visited, nearvs) end
	end
	W = hcat([sum(V[:,class], dims=2)/length(class) for class in vclasses]...)
	return W, vclasses
end



function cellcongruence(Delta, inclasses; dim)
	cellarray = Lar.cop2lar(Delta)
	newcell = Vector(undef, size(Delta,2))
	[ newcell[e] = k for (k, class) in enumerate(inclasses) for e in class ]
	cells = [map(x -> newcell[x], face) for face in cellarray]
	okcells = [c for c in cells if length(Set(c)) > dim] # non-empty cells
	classes = DefaultOrderedDict{Vector, Vector}([])
	for (k,face) in enumerate(okcells)
		classes[face] == [] ? classes[face] = [k] : append!(classes[face], [k])
	end
	cells = collect(keys(classes))
	outclasses = collect(values(classes))
	return cells, outclasses
end



function chaincongruence(W, Delta0, Delta1; epsilon=1e-6)
	V, vclasses = vcongruence(W, epsilon)
	EV, eclasses = cellcongruence(Delta0, vclasses, dim=1)
	FE, fclasses = cellcongruence(Delta1, eclasses, dim=2)
	FV = [union([EV[e] for e in f]...) for f in FE]
	return V, EV, FE, FV
end


W = convert(Matrix,[0.5310492999999998 0.8659989999999999 0.14191280000000003; 1.0146684 0.6827212999999999 0.2169682; 0.3477716 0.5268921 0.4947971000000001; 0.8313907882395298 0.3436144447063971 0.5698524407571428; 0.6061046999999998 1.2188832999999994 0.5200012; 1.0897237999999998 1.0356056999999999 0.5950565999999999; 0.42282699999999984 0.8797763999999998 0.8728855; 0.9064461979373597 0.6964987903021808 0.9479408896095312; 0.5310493 0.8659989999999999 0.14191279999999987; 1.0146684000000001 0.6827213 0.21696819999999994; 0.6061047 1.2188833 0.5200011999999999; 1.0897237772434623 1.035605657895053 0.5950566438156151; 0.3477716 0.5268921 0.4947971; 0.8313908 0.3436145 0.5698525000000001; 0.422827 0.8797764000000001 0.8728855; 0.9064462 0.6964988 0.9479409; 0.5310493 0.8659989999999999 0.14191280000000006; 0.34777160000000007 0.5268920999999999 0.4947971000000001; 0.6061047 1.2188833 0.5200012000000002; 0.4228270000000002 0.8797764 0.8728855000000001; 1.0146684 0.6827213 0.21696819999999994; 0.8313908 0.3436145 0.5698525000000001; 1.0897238 1.0356057 0.5950565999999999; 0.9064461675456482 0.6964988122992563 0.9479408949632379]'); 
Delta_0 = SparseArrays.sparse([1, 3, 1, 4, 2, 3, 2, 4, 5, 7, 5, 8, 6, 7, 6, 8, 9, 11, 9, 12, 10, 11, 10, 12, 13, 15, 13, 16, 14, 15, 14, 16, 17, 19, 17, 20, 18, 19, 18, 20, 21, 23, 21, 24, 22, 23, 22, 24], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24], Int8[-1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1]);
Delta_1 = SparseArrays.sparse([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], Int8[1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1]);

V,EV,FE,FV = chaincongruence(W,Delta_0,Delta_1,epsilon=1e-4);

@show V;  # centroids of the 8 $\overset{\epsilon}{\sim}$ classes of W points
@show EV;  # edges-by-vertices
@show FE;  # faces-by-edges
@show FV;  # faces-by-vertices





W = convert(Matrix,[-0.38740630000000004 0.49022260000000006 0.45363390000000015; 0.3249123 0.707347 0.5231232000000001; -0.17028190000000007 -0.08642419999999995 0.029717700000000125; 0.542036694733776 0.13070013212634024 0.09920695360173326; -0.317917 0.06630639999999999 1.0658723; 0.3944015999999999 0.28343080000000004 1.1353616; -0.10079260000000007 -0.5103404 0.6419561000000001; 0.6115259947337761 -0.2932160678736597 0.7114453536017331; -0.3874063 0.4902226000000001 0.45363390000000003; 0.32491230000000004 0.7073470000000001 0.5231232000000001; -0.31791699999999995 0.06630639999999999 1.0658723; 0.39440160000000013 0.28343080000000004 1.1353616; -0.1702819 -0.08642419999999999 0.0297177; 0.5420366999999999 0.13070010000000004 0.09920700000000002; -0.10079260000000004 -0.5103403999999999 0.6419561000000001; 0.611526 -0.2932160999999999 0.7114454; 0.19232632825298282 -0.12794307378859587 0.27191838727041745; 0.06793576156374279 -0.27817482626798234 0.4125651841369061; 0.11898101245114942 -0.28171847559315566 0.44353026597502554; -0.38740630000000004 0.49022260000000006 0.4536339; -0.17028190000000007 -0.08642419999999995 0.029717700000000014; -0.31791700000000006 0.0663064000000001 1.0658723; -0.10079260000000007 -0.5103404 0.6419561; -0.22039804348690156 -0.06683826697471296 0.4822487320160556; -0.22025999018892456 -0.06114183775734239 0.4630346767698157; -0.21520721568246745 -0.07974293126956722 0.4693603419651943; 0.3249122999999999 0.7073470000000001 0.5231232; 0.5420366999999999 0.13070009999999987 0.09920699999999993; 0.3944015999999999 0.28343080000000015 1.1353616; 0.6115259999999999 -0.29321609999999987 0.7114453999999999; -0.22619069999999997 -0.07204550000000004 0.47156350000000014; -0.04998879999999989 0.08634890000000003 0.7965885000000001; -0.2203980434869015 -0.06683826697471301 0.4822487320160557; -0.06779629999999998 0.21916400000000003 0.24378000000000005; 0.1084055869015021 0.3775584091796722 0.5688049026274027; -0.22025999018892448 -0.06114183775734255 0.4630346767698158; 0.09883429999999994 -0.29982910000000007 0.4063673; 0.27503619999999995 -0.14143470000000002 0.7313923; 0.11898101245114936 -0.28171847559315577 0.4435302659750255; 0.2572285999999999 -0.008619600000000005 0.17858379999999996; 0.4334305216010028 0.14977485494346238 0.503608715725915; 0.1923263282529827 -0.12794307378859604 0.2719183872704175; -0.22619069999999997 -0.07204550000000003 0.4715635000000001; -0.04998879999999997 0.08634889999999999 0.7965885000000001; -0.2203980434869015 -0.066838266974713 0.48224873201605567; 0.09883429999999993 -0.29982910000000007 0.4063673000000001; 0.27503619999999995 -0.14143470000000014 0.7313923; 0.11898101245114928 -0.2817184755931558 0.44353026597502543; -0.21520721568246737 -0.07974293126956734 0.4693603419651944; 0.06793576156374292 -0.2781748262679825 0.4125651841369062; -0.06779630000000005 0.21916399999999997 0.24378; 0.1084056 0.37755839999999996 0.5688048999999998; 0.2572286 -0.00861960000000006 0.17858379999999993; 0.4334305844917613 0.14977477148796534 0.5036087223020691; -0.22619070000000002 -0.07204549999999998 0.4715635; -0.06779630000000003 0.21916399999999997 0.24378; -0.2202599901889245 -0.061141837757342415 0.4630346767698156; 0.09883429999999993 -0.2998290999999999 0.4063673; 0.2572286191912876 -0.008619582748250504 0.17858383540057032; 0.19232628701409532 -0.12794316024983834 0.2719184837603397; -0.21520721568246734 -0.07974293126956736 0.4693603419651943; 0.06793576156374287 -0.2781748262679824 0.4125651841369061; -0.049988799999999944 0.08634889999999984 0.7965885; 0.10840560000000007 0.37755839999999985 0.5688049; 0.2750362 -0.14143470000000014 0.7313923; 0.43343060000000005 0.14977479999999987 0.5036087]');
Delta_0 = SparseArrays.sparse([1, 3, 1, 4, 2, 3, 2, 4, 5, 7, 5, 8, 6, 7, 6, 8, 9, 11, 9, 12, 10, 11, 10, 12, 13, 15, 13, 16, 14, 15, 14, 16, 17, 19, 17, 18, 18, 19, 20, 22, 20, 23, 21, 22, 21, 23, 24, 26, 24, 25, 25, 26, 27, 29, 27, 30, 28, 29, 28, 30, 31, 34, 32, 36, 31, 32, 37, 33, 35, 33, 36, 34, 35, 37, 38, 41, 39, 43, 38, 39, 44, 40, 42, 40, 43, 41, 42, 44, 45, 49, 46, 52, 45, 46, 53, 47, 51, 48, 52, 47, 48, 54, 49, 50, 53, 50, 51, 54, 55, 57, 55, 58, 56, 57, 56, 58, 59, 63, 60, 66, 59, 60, 67, 61, 65, 62, 66, 61, 62, 68, 63, 64, 67, 64, 65, 68, 69, 71, 69, 72, 70, 71, 70, 72], [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 33, 34, 34, 35, 35, 36, 36, 36, 37, 37, 38, 38, 39, 39, 39, 40, 40, 41, 41, 42, 42, 42, 43, 43, 44, 44, 45, 45, 45, 46, 46, 47, 47, 48, 48, 48, 49, 49, 49, 50, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 57, 58, 58, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66], Int8[-1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, -1, 1, -1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1]);
Delta_1 = SparseArrays.sparse([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 4, 5, 4, 5, 6, 6, 6, 6, 6, 7, 6, 7, 6, 7, 8, 8, 8, 8, 9, 10, 10, 9, 10, 10, 9, 10, 11, 12, 12, 11, 12, 12, 11, 12, 13, 14, 15, 14, 13, 14, 15, 14, 13, 14, 14, 15, 16, 16, 16, 16, 17, 18, 19, 18, 17, 18, 19, 18, 17, 18, 18, 19, 20, 20, 20, 20], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 18, 19, 19, 20, 21, 22, 23, 24, 24, 25, 25, 26, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 68, 69, 70, 71, 72], Int8[1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, 1]);

V,EV,FE,FV = chaincongruence(W,Delta_0,Delta_1,epsilon=1e-4);

@show V;  # centroids of the 8 $\overset{\epsilon}{\sim}$ classes of W points
@show EV;  # edges-by-vertices
@show FE;  # faces-by-edges
@show FV;  # faces-by-vertices

